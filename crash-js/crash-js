#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_argv =
  process.argv
const
  _fs_utils =
    require(
      "./fs-utils");
_basename =
  _fs_utils._basename

function
  _app_name_get() {
  let
    _filename;
  _filename =
    _basename(
      __filename);
  return _filename;
}


function 
  _msg_template(
    _app_name,
    _type) {
  let
    _out,
    _partial,
    _template;
  _template =
    "[{_app_name}] {_type}: {_msg}"
  _partial =
    _template.replaceAll(
      "{_app_name}",
      _app_name);
  _out =
    _partial.replaceAll(
      "{_type}",
      _type);
  return _out;
}


function
  _msg_info(
    _msg) {
  let
    _out;
  if ( quiet == "n" ) {
    _template =
      _msg_template(
	app_name,
        'INFO');
    _out =
      _template.replaceAll(
        "{_msg}",
        _msg);
    console.log(
      _out);
  }
}


function
  _msg_error(
    _msg,
    _exit) {
  let
    _template,
    _out;
  _template =
    _msg_template(
      app_name,
      'ERROR');
  _out =
    _template.replaceAll(
      "{_msg}",
      _msg);
  console.error(
    _out);
  if (_exit == "1" ) {
    process.exit(
      1);
  }
}


function 
  _msg_info_obj(
    _name,
    _obj) {
  let
    _template,
    _partial,
    _msg;
  _template =
    "{_name}: '{_obj}'"
  _partial =
    _template.replaceAll(
      "{_name}",
      _name);
  _msg =
    _partial.replaceAll(
      "{_obj}",
      _obj);
  _msg_info(
    _msg);
}

function
  _cmdline_check(
    _app_name) {
  let
    _program,
    _program_name;
  _program =
    _argv[
      1];
  _program_name =
    _basename(
      _program);
  if ( _program_name == _app_name ) {
    return true;
  }
  else {
    return false;
  }
}

module.exports = {
  _app_name_get:
    _app_name_get,
  _basename:
    _fs_utils._basename,
  _cmdline_check:
    _cmdline_check,
  _dirname:
    _fs_utils._dirname,
  _ext_rm:
    _fs_utils._ext_rm,
  _file_exists:
    _fs_utils._file_exists,
  _file_read:
    _fs_utils._file_read,
  _file_write:
    _fs_utils._file_write,
  _json_read:
    _fs_utils._json_read,
  _msg_info:
    _msg_info,
  _msg_error:
    _msg_error,
  _msg_info_obj:
    _msg_info_obj,
  _path_join:
    _fs_utils._path_join
};
